)
output$plot1 <- renderPlotly(
plot1 <- p_1 %>%
add_trace(data = data_for_plot1 %>%
filter(site_no == ifelse(
is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = "Selected Site",
line = list(width=2.5, color="black"),
opacity = 1,
showlegend = T)
)
output$plot2 <- renderPlotly(
plot2 <- plot_ly() %>%
layout(title = "",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = "",
type = 'date',
tickformat = " %B")) %>%
add_trace(data = data_for_plot2 %>%
filter(year == 2021)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
name = "2021",
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="black",
size = 2.5))
%>%
add_trace(data = data_for_plot2 %>%
filter(year == 2015)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
name = "2015",
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="gray"),
size = 2.5) %>%
add_trace(data = data_for_plot2 %>%
filter(color_group == "other years")  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
yaxis="y1",
name = "other years",
color =~color_group,
line=list(color='#1f77b4'),
opacity=0.4,
showlegend = T)
)
}
# ---------------------------------------------------
# 3. ui Function
# --------------------------------------------------
ui <- fluidPage(
headerPanel('Stream Temperature in the Pacific Northwest'),
# sidebarPanel(
#   leafletOutput(outputId = "map")
# ),
mainPanel(h3("Choose a USGS station from the map. "),
leafletOutput(outputId = "map"),
h3(""),
tabsetPanel(type = "tabs",
tabPanel("All Sites, 2021",  plotlyOutput('plot1')),
tabPanel("Selected Site, 2000-2021",  plotlyOutput('plot2'))
)
)
)
shinyApp(ui = ui, server = server)
# ---------------------------------------------------
# 0. Load Packages, set directory and parameters
# --------------------------------------------------
library(shinyr); library(plotly); library(leaflet)
heatwave_start = '2021-06-10'
heatwave_end =  '2021-07-20'
# ---------------------------------------------------
# 1. Load Data and Prepare for Plotting
# --------------------------------------------------
# plotData = readRDS('./Rdata/plotData.rds')
data_for_plot1 = readRDS('./Rdata/data_for_plot1')
data_for_plot2 = readRDS('./Rdata/data_for_plot2')
siteData = readRDS('./Rdata/sitesData.rds')
states_data = maps::map('state', regions=c('oregon', 'washington','idaho'), fill = T, plot = F)
p_1 <- plot_ly() %>%
layout(# title = "Stream Temperature for All Sites in 2021",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = '',
type = 'date',
tickformat = " %B<br>%Y"),
shapes = list(list(type = "rect",
fillcolor = "red", line = list(color = "red"), opacity = 0.2,
y0 = 35, y1 = 85, x0 = heatwave_start, x1 = heatwave_end),
list(type = "line", x0 = "2021-04-01", x1 = '2021-09-30',
y0 = 68, y1 = 68,
line = list(color = "black", dash = "dash")))) %>%
add_text(x = c("2021-07-01", "2021-05-02"), y = c(38, 71),
text = c("2021 Heatwave","Dangerous Temperature \n for Salmon"),
showlegend = F) %>%
add_trace(data = data_for_plot1,
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = ~site_no,
line=list(width=0.8),
opacity=.5,
showlegend = F)
# ---------------------------------------------------
# 2. Server Function
# --------------------------------------------------
server <- function(input, output) {
output$map <- renderLeaflet(
map <- leaflet() %>%
setView(lng = -117.64, lat = 45.88, zoom = 5.4) %>%
addProviderTiles(providers$Stamen.TerrainBackground, options = providerTileOptions(opacity = 0.5)) %>%
addPolygons(data = states_data, fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
addMarkers(data = siteData,
~dec_long_va,
~dec_lat_va,
label = ~htmltools::htmlEscape(station_nm),
layerId = ~site_no))
observeEvent(input$map_marker_click, {
p <- input$map_marker_click[1]
}
)
output$plot1 <- renderPlotly(
plot1 <- p_1 %>%
add_trace(data = data_for_plot1 %>%
filter(site_no == ifelse(
is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = "Selected Site",
line = list(width=2.5, color="black"),
opacity = 1,
showlegend = T)
)
output$plot2 <- renderPlotly(
plot2 <- plot_ly() %>%
layout(title = "",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = "",
type = 'date',
tickformat = " %B")) %>%
add_trace(data = data_for_plot2 %>%
filter(year == 2021)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
name = "2021",
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="black",
size = 2.5))
%>%
add_trace(data = data_for_plot2 %>%
filter(year == 2015)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
name = "2015",
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="gray"),
size = 2.5) %>%
add_trace(data = data_for_plot2 %>%
filter(color_group == "other years")  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
yaxis="y1",
name = "other years",
color =~color_group,
line=list(color='#1f77b4'),
opacity=0.4,
showlegend = T)
)
}
# ---------------------------------------------------
# 3. ui Function
# --------------------------------------------------
ui <- fluidPage(
headerPanel('Stream Temperature in the Pacific Northwest'),
# sidebarPanel(
#   leafletOutput(outputId = "map")
# ),
mainPanel(h3("Choose a USGS station from the map. "),
leafletOutput(outputId = "map"),
h3(""),
tabsetPanel(type = "tabs",
tabPanel("All Sites, 2021",  plotlyOutput('plot1')),
tabPanel("Selected Site, 2000-2021",  plotlyOutput('plot2'))
)
)
)
shinyApp(ui = ui, server = server)
# ---------------------------------------------------
# 0. Load Packages, set directory and parameters
# --------------------------------------------------
library(shinyr); library(plotly); library(leaflet)
heatwave_start = '2021-06-10'
heatwave_end =  '2021-07-20'
# ---------------------------------------------------
# 1. Load Data and Prepare for Plotting
# --------------------------------------------------
# plotData = readRDS('./Rdata/plotData.rds')
data_for_plot1 = readRDS('./Rdata/data_for_plot1')
data_for_plot2 = readRDS('./Rdata/data_for_plot2')
siteData = readRDS('./Rdata/sitesData.rds')
states_data = maps::map('state', regions=c('oregon', 'washington','idaho'), fill = T, plot = F)
p_1 <- plot_ly() %>%
layout(# title = "Stream Temperature for All Sites in 2021",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = '',
type = 'date',
tickformat = " %B<br>%Y"),
shapes = list(list(type = "rect",
fillcolor = "red", line = list(color = "red"), opacity = 0.2,
y0 = 35, y1 = 85, x0 = heatwave_start, x1 = heatwave_end),
list(type = "line", x0 = "2021-04-01", x1 = '2021-09-30',
y0 = 68, y1 = 68,
line = list(color = "black", dash = "dash")))) %>%
add_text(x = c("2021-07-01", "2021-05-02"), y = c(38, 71),
text = c("2021 Heatwave","Dangerous Temperature \n for Salmon"),
showlegend = F) %>%
add_trace(data = data_for_plot1,
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = ~site_no,
line=list(width=0.8),
opacity=.5,
showlegend = F)
# ---------------------------------------------------
# 2. Server Function
# --------------------------------------------------
server <- function(input, output) {
output$map <- renderLeaflet(
map <- leaflet() %>%
setView(lng = -117.64, lat = 45.88, zoom = 5.4) %>%
addProviderTiles(providers$Stamen.TerrainBackground, options = providerTileOptions(opacity = 0.5)) %>%
addPolygons(data = states_data, fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
addMarkers(data = siteData,
~dec_long_va,
~dec_lat_va,
label = ~htmltools::htmlEscape(station_nm),
layerId = ~site_no))
observeEvent(input$map_marker_click, {
p <- input$map_marker_click[1]
}
)
output$plot1 <- renderPlotly(
plot1 <- p_1 %>%
add_trace(data = data_for_plot1 %>%
filter(site_no == ifelse(
is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = "Selected Site",
line = list(width=2.5, color="black"),
opacity = 1,
showlegend = T)
)
output$plot2 <- renderPlotly(
plot2 <- plot_ly() %>%
layout(title = "",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = "",
type = 'date',
tickformat = " %B")) %>%
add_trace(data = data_for_plot2 %>%
filter(year == 2021)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
name = "2021",
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="black",
size = 2.5))
%>%
add_trace(data = data_for_plot2 %>%
filter(year == 2015)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
name = "2015",
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="gray"),
size = 2.5) %>%
add_trace(data = data_for_plot2 %>%
filter(color_group == "other years")  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
yaxis="y1",
name = "other years",
color =~color_group,
line=list(color='#1f77b4'),
opacity=0.4,
showlegend = T)
)
}
# ---------------------------------------------------
# 3. ui Function
# --------------------------------------------------
ui <- fluidPage(
headerPanel('Stream Temperature in the Pacific Northwest'),
# sidebarPanel(
#   leafletOutput(outputId = "map")
# ),
mainPanel(h3("Choose a USGS station from the map. "),
leafletOutput(outputId = "map"),
h3(""),
tabsetPanel(type = "tabs",
tabPanel("All Sites, 2021",  plotlyOutput('plot1')),
tabPanel("Selected Site, 2000-2021",  plotlyOutput('plot2'))
)
)
)
shinyApp(ui = ui, server = server)
runApp('code')
runApp('code')
setwd('~')
getwd()
list.files()
runApp('Documents/portfolio/Pacific_Northwest_Heatwave/Stream_Temperature/code')
shiny::runApp('Documents/portfolio/Pacific_Northwest_Heatwave/Stream_Temperature/code')
shiny::runApp('Documents/portfolio/Pacific_Northwest_Heatwave/Stream_Temperature')
runApp('Documents/portfolio/Pacific_Northwest_Heatwave/Stream_Temperature')
runApp('Documents/portfolio/Pacific_Northwest_Heatwave/Stream_Temperature')
setwd("~/Documents/portfolio/Pacific_Northwest_Heatwave/Stream_Temperature")
runApp()
# ---------------------------------------------------
# 0. Load Packages, set directory and parameters
# --------------------------------------------------
library(shinyr); library(plotly); library(leaflet)
heatwave_start = '2021-06-10'
heatwave_end =  '2021-07-20'
# ---------------------------------------------------
# 1. Load Data and Prepare for Plotting
# --------------------------------------------------
data_for_plot1 = readRDS('./data_for_plot1')
data_for_plot2 = readRDS('./data_for_plot2')
siteData = readRDS('./sitesData.rds')
states_data = maps::map('state', regions=c('oregon', 'washington','idaho'), fill = T, plot = F)
p_1 <- plot_ly() %>%
layout(# title = "Stream Temperature for All Sites in 2021",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = '',
type = 'date',
tickformat = " %B<br>%Y"),
shapes = list(list(type = "rect",
fillcolor = "red", line = list(color = "red"), opacity = 0.2,
y0 = 35, y1 = 85, x0 = heatwave_start, x1 = heatwave_end),
list(type = "line", x0 = "2021-04-01", x1 = '2021-09-30',
y0 = 68, y1 = 68,
line = list(color = "black", dash = "dash")))) %>%
add_text(x = c("2021-07-01", "2021-05-02"), y = c(38, 71),
text = c("2021 Heatwave","Dangerous Temperature \n for Salmon"),
showlegend = F) %>%
add_trace(data = data_for_plot1,
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = ~site_no,
line=list(width=0.8),
opacity=.5,
showlegend = F)
# ---------------------------------------------------
# 2. Server Function
# --------------------------------------------------
server <- function(input, output) {
output$map <- renderLeaflet(
map <- leaflet() %>%
setView(lng = -117.64, lat = 45.88, zoom = 5.4) %>%
addProviderTiles(providers$Stamen.TerrainBackground, options = providerTileOptions(opacity = 0.5)) %>%
addPolygons(data = states_data, fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
addMarkers(data = siteData,
~dec_long_va,
~dec_lat_va,
label = ~htmltools::htmlEscape(station_nm),
layerId = ~site_no))
observeEvent(input$map_marker_click, {
p <- input$map_marker_click[1]
}
)
output$plot1 <- renderPlotly(
plot1 <- p_1 %>%
add_trace(data = data_for_plot1 %>%
filter(site_no == ifelse(
is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~dateTime,
y = ~tempF,
mode = 'lines',
name = "Selected Site",
line = list(width=2.5, color="black"),
opacity = 1,
showlegend = T)
)
output$plot2 <- renderPlotly(
plot2 <- plot_ly() %>%
layout(title = "",
yaxis=list(title='Stream Temperature [F]'),
xaxis = list(title = "",
type = 'date',
tickformat = " %B")) %>%
add_trace(data = data_for_plot2 %>%
filter(year == 2021)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
name = "2021",
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="black",
size = 2.5))
%>%
add_trace(data = data_for_plot2 %>%
filter(year == 2015)  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
name = "2015",
y = ~tempF,
mode = 'lines',
line = list(width=2.5, color="gray"),
size = 2.5) %>%
add_trace(data = data_for_plot2 %>%
filter(color_group == "other years")  %>%
filter(site_no == ifelse(is.null(input$map_marker_click[1]),
14169000,
input$map_marker_click[1])),
type = "scatter",
x = ~date_all_2021,
y = ~tempF,
mode = 'lines',
yaxis="y1",
name = "other years",
color =~color_group,
line=list(color='#1f77b4'),
opacity=0.4,
showlegend = T)
)
}
# ---------------------------------------------------
# 3. ui Function
# --------------------------------------------------
ui <- fluidPage(
headerPanel('Stream Temperature in the Pacific Northwest'),
# sidebarPanel(
#   leafletOutput(outputId = "map")
# ),
mainPanel(h3("Choose a USGS station from the map. "),
leafletOutput(outputId = "map"),
h3(""),
tabsetPanel(type = "tabs",
tabPanel("All Sites, 2021",  plotlyOutput('plot1')),
tabPanel("Selected Site, 2000-2021",  plotlyOutput('plot2'))
)
)
)
shinyApp(ui = ui, server = server)
